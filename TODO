
To be implemented
-----------------

Based on colorspace Namespace

* export(lighten)
* export(darken)
* export(max_chroma)
* export(carto_hcl)
* export(mixcolor)


BUG in python-colorspace
------------------------
[ ] Integer inputs yeild 0-colors in sRGB! Why?
```
from colorspace.colorlib import RGB
cols = RGB([1,0,0],[0,1,0],[0,0,1])
print cols
cols.to("sRGB")
print cols
```

BUG in R colorspace
-------------------
[ ] specplot uses equidistant rectangles, but having
    the two most outer ones only half of the width of the
    ones in the middle might be more appropriate.

BUG in R colorspace
-------------------
[X] Bug in interpolate_cvd_transform.
    The second case statement should for sure be >= 11. Report

```
    if ( severity <= 0 ) {
        cvd[[1]]
    } else if ( severity >= 1 ) {
        cvd[[11]]
    } else {
        ...
    }
```

logging
-------
[X] The logging package causes problems in rmarkdown/python.
    Hm. Done, can now be controlled via CSLOGLEVEL environment
    variable.

Palette functions
-----------------
[ ] Make palette objects __call__'able and return some colors,
    most probably the hex colors. Then, rewrite the colors
    method to something like colors(n = 10, type_ = "hex")
    such that it returns 'n' colors of type 'type_' (a
    color object).

Plotting function
-----------------
[ ] Add as "colorbarplot" method to the hclpalette objects
    which plots the colormap as a bar or circle (optional).
    Could depend on a palettes.colorbarplot which should then
    also be used in the specplot function.

Setting parameters
------------------
[ ] hclpalette.set(**kwargs) to set all allowed parameters
    and a functionality to allow to set h = [h1,h2] if
    possible. Use _checkinputs_.


